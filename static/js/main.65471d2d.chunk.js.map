{"version":3,"sources":["redux/actions.js","firebase/firebaseConfig.js","App.js","redux/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","quotesRef","ref","randomIndex","Math","floor","random","increment","item","console","log","dispatch","set","author","quote","upvote","downvote","type","decrement","refreshQuote","orderByKey","equalTo","on","snapshot","val","payload","mapDispatchToProps","connect","state","props","useDispatch","refreshPage","window","location","reload","className","onClick","initialState","store","createStore","action","applyMiddleware","thunk","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAIAA,gBCJe,CACZC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8CDFV,IAAMC,EAAYR,aAAoBS,IAAI,UAEpCC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAD7B,MAGhB,SAASE,EAAUC,GACvB,OAD+BC,QAAQC,IAAIP,EAAa,SACjD,SAACQ,GACLlB,aAAoBS,IAApB,kBAAmCC,IAAeS,IAAI,CACnDC,OAAQL,EAAKK,OACbC,MAAON,EAAKM,MACZC,OAAQP,EAAKO,OAAS,EACtBC,SAAUR,EAAKQ,WAElBL,EAAS,CACNM,KAAM,aAIR,SAASC,EAAUV,GACvB,OAD+BC,QAAQC,IAAIP,EAAa,SACjD,SAACQ,GACLlB,aAAoBS,IAApB,kBAAmCC,IAAeS,IAAI,CACnDC,OAAQL,EAAKK,OACbC,MAAON,EAAKM,MACZC,OAAQP,EAAKO,OACbC,SAAUR,EAAKQ,SAAW,IAE7BL,EAAS,CACNM,KAAM,eAIR,SAASE,IACb,OAAO,SAACR,GACLV,EAAUmB,aAAaC,QAAvB,UAAkClB,IAAemB,GAAG,eAAe,SAACC,GACjE,IAAMf,EAAOe,EAASC,MACtBf,QAAQC,IAAIF,EAAM,YAClBG,EAAS,CACNM,KAAM,UACNQ,QAASjB,QESrB,IAGMkB,EAAqB,CAAEnB,YAAWW,YAAWC,gBAEpCQ,eALS,SAACC,GACvB,OAAOA,IAI+BF,EAAzBC,EAlDf,SAAaE,GACX,IAAMlB,EAAWmB,cAGjB,SAASC,IACPC,OAAOC,SAASC,QAAO,GAKzB,OARAvB,EAASQ,KASP,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aAAaC,QAASL,GAArC,eAIF,yBAAKI,UAAU,cACb,yBAAKA,UAAU,kBACb,uCAASN,EAAMf,MAAf,MACA,gCAAMe,EAAMhB,QAGV,yBAAKsB,UAAU,OACb,yBAAKA,UAAU,UACb,4BAAKN,EAAMd,QACX,uBAAGqB,QAAS,kBAAMzB,EAASJ,EAAUsB,KAASM,UAAU,4BAE1D,yBAAKA,UAAU,UACb,4BAAKN,EAAMb,UACX,uBAAGoB,QAAS,kBAAMzB,EAASO,EAAUW,KAASM,UAAU,+BAG5D,4BAAQA,UAAU,uBAAuBC,QAASL,GAAlD,qC,cCvCCM,EAAe,CACzBvB,MAAO,I,YCIKwB,EADDC,aDOC,WAAgD,IAA/BX,EAA8B,uDAAtBS,EAAcG,EAAQ,uCAC3D,OAAOA,EAAOvB,MACX,IAAK,UACF,OAAO,2BACDW,GADN,IAEGb,OAAQa,EAAMb,OAAS,IAE7B,IAAK,YACC,OAAO,2BACDa,GADN,IAEGZ,SAAUY,EAAMZ,SAAW,IAEpC,IAAK,UACF,OAAewB,EAAOf,QACzB,QACG,OAAOG,KCtBmBa,YAAgBC,MCQ/BC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.65471d2d.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'\nimport 'firebase/database'\nimport firebaseConfig from '../firebase/firebaseConfig'\n\nfirebase.initializeApp(firebaseConfig)\nconst quotesRef = firebase.database().ref('quotes')\nconst numberOfQuotes = 101;\nconst randomIndex = Math.floor(Math.random() * Math.floor(numberOfQuotes));\n\nexport function increment(item) { console.log(randomIndex, \"index\")\n   return (dispatch) => {\n      firebase.database().ref(`/quotes/${randomIndex}`).set({\n         author: item.author,\n         quote: item.quote,\n         upvote: item.upvote + 1,\n         downvote: item.downvote\n      })\n      dispatch({\n         type: \"UP_VOTE\"\n      })\n   }\n}\nexport function decrement(item) { console.log(randomIndex, \"index\") \n   return (dispatch) => {\n      firebase.database().ref(`/quotes/${randomIndex}`).set({\n         author: item.author,\n         quote: item.quote,\n         upvote: item.upvote,\n         downvote: item.downvote - 1\n      })\n      dispatch({\n         type: \"DOWN_VOTE\"\n      })\n   }\n}\nexport function refreshQuote() {\n   return (dispatch) => {\n      quotesRef.orderByKey().equalTo(`${randomIndex}`).on('child_added', (snapshot) => {\n         const item = snapshot.val()\n         console.log(item, \"QUOTE???\") \n         dispatch({\n            type: \"REFRESH\",\n            payload: item\n         })\n      })\n   }\n}","export default {\n   apiKey: \"AIzaSyDJ-S5kFjE8QTIABG2aIST05TSgOBPqSuM\",\n   authDomain: \"vote-quote1.firebaseapp.com\",\n   databaseURL: \"https://vote-quote1.firebaseio.com\",\n   projectId: \"vote-quote1\",\n   storageBucket: \"vote-quote1.appspot.com\",\n   messagingSenderId: \"535203196249\",\n   appId: \"1:535203196249:web:62a802d6c5b1d8da4eb048\"\n}\n\n","import React from 'react';\nimport './App.css';\nimport {connect, useDispatch} from 'react-redux'\nimport {increment, decrement, refreshQuote} from './redux/actions'\nimport 'firebase/database'\n\nfunction App(props) {\n  const dispatch = useDispatch()\n  dispatch(refreshQuote())\n\n  function refreshPage() {\n    window.location.reload(false)\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar nav-color\">\n        <div className=\"main-title\" onClick={refreshPage}>Vote-Quote</div>\n        \n      </nav>\n\n      <div className=\"App-header\">\n        <div className=\"container flex\">\n          <h1>{`\"${props.quote}\"`}</h1>\n          <h2>-{props.author}</h2>\n\n         \n            <div className=\"row\">\n              <div className=\"col-sm\">\n                <h5>{props.upvote}</h5>\n                <i onClick={() => dispatch(increment(props))} className=\"far fa-thumbs-up fa-2x\"></i>\n              </div>\n              <div className=\"col-sm\">\n                <h5>{props.downvote}</h5>\n                <i onClick={() => dispatch(decrement(props))} className=\"far fa-thumbs-down fa-2x\"></i>\n              </div>\n            </div>\n            <button className=\"btn btn-outline-dark\" onClick={refreshPage}>Click here for new quote!!!</button>\n          \n        </div>\n        \n        \n        \n        \n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return state\n}\nconst mapDispatchToProps = { increment, decrement, refreshQuote }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const initialState = {\n   quote: [\n   // need to pull this from firebase somehow upon load/when next quote selected\n\n   //    author: '',\n   //    quote: '',\n   //    upvote: 0,\n   //    donvote: 0\n   ] \n}\n\nexport default function reducer(state = initialState, action) {  \n   switch(action.type) {\n      case \"UP_VOTE\":\n         return {\n            ...state,\n            upvote: state.upvote + 1\n         }\n      case \"DOWN_VOTE\":\n            return {\n               ...state,\n               downvote: state.downvote - 1\n            }\n      case \"REFRESH\": \n         return state = action.payload\n      default:\n         return state\n   }\n} ","import {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducer'\nimport thunk from \"redux-thunk\"\n\nconst store = createStore(reducer, applyMiddleware(thunk))\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}